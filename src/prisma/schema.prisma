datasource db {
    provider = "mongodb"
    url      = env("MONGO_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String                    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?                   @unique
    username      String?                   @unique
    conversations ConversationParticipant[]
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Message       Message[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Conversation {
    id              String                    @id @default(auto()) @map("_id") @db.ObjectId
    messages        Message[]
    participants    ConversationParticipant[]
    latestMessageId String?                   @unique @db.ObjectId
    latestMessage   Message?                  @relation(name: "LatestConversationMessage", fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    createAt        DateTime                  @default(now())
    updatedAt       DateTime                  @updatedAt
}

model ConversationParticipant {
    id                   String       @id @default(auto()) @map("_id") @db.ObjectId
    userId               String       @db.ObjectId
    user                 User         @relation(fields: [userId], references: [id])
    conversationId       String       @db.ObjectId
    conversation         Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    hasSeenLatestMessage Boolean
    createAt             DateTime     @default(now())
    updatedAt            DateTime     @updatedAt
}

model Message {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    conversationId String        @db.ObjectId
    conversation   Conversation  @relation(fields: [conversationId], references: [id])
    senderId       String        @db.ObjectId
    sender         User          @relation(fields: [senderId], references: [id])
    isLatestIn     Conversation? @relation(name: "LatestConversationMessage")
    createAt       DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
}
